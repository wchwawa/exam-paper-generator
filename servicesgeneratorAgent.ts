// services/generatorAgent.ts
import { OpenAI } from 'openai';
import { client } from '../utils/openai/client'; // 确保路径正确

interface PdfTemplate {
  uid: string;
  lectureTitle: string;
  abstract: string;
  keyPoints: string;
  content: string;
}

interface McqOption {
  optionId: string;
  optionTitle: string;
  optionValue: string;
  explanation: string;
}

interface McqQuestion {
  questionId: string;
  questionTitle: string;
  questionType: 'mcq';
  answer: string; // Correct option ID
  userAnswer: string; // User's answer
  hint: string;
  mcqOptions: McqOption;
}

interface ShortAnswerQuestion {
  questionId: string;
  questionTitle: string;
  questionType: 'short-answer';
  userAnswer: string;
  explanation: string; // Solution/reasoning
}

interface TestPaper {
  paperId: string;
  paperTitle: string;
  question: (McqQuestion | ShortAnswerQuestion);
}

async function generateQuestionPaper(pdfTemplate: PdfTemplate): Promise<TestPaper> {
  const paperId = Date.now().toString();
  const paperTitle = pdfTemplate.lectureTitle || 'Untitled Test Paper';
  const questions: (McqQuestion | ShortAnswerQuestion)=;
  let questionCounter = 1;

  // --- Initial Prompt to Understand the PDF Content ---
  const understandingPrompt = `Understand the main content of the following PDF based on its title, abstract, and key points. Then, generate a question paper with a mix of multiple-choice and short-answer questions based on this content.

  Title: ${pdfTemplate.lectureTitle}
  Abstract: ${pdfTemplate.abstract}
  Key Points: ${pdfTemplate.keyPoints}

  Generate approximately 2 multiple-choice questions and 2 short-answer questions.

  For multiple-choice questions, each question should have 4 options (A, B, C, D). Clearly indicate the correct answer's option ID. Also, for each option, provide a brief explanation of why it is correct or incorrect and related knowledge. Include a hint for the question if possible.

  For short-answer questions, provide the question and an explanation that serves as the solution or reasoning.

  The format of the output should be a JSON object as described in the example.`;

  try {
    const generalResponse = await client.chat.completions.create({
      model: 'gpt-4', // Consider using a more capable model for better results
      messages: [{ role: 'user', content: understandingPrompt }],
      temperature: 0.7,
    });

    const generatedContent = generalResponse.choices[0]?.message?.content;

    if (generatedContent) {
      try {
        const parsedQuestions = JSON.parse(generatedContent) as { question: (McqQuestion | ShortAnswerQuestion)};
        if (parsedQuestions && Array.isArray(parsedQuestions.question)) {
          questions.push(...(parsedQuestions.question as (McqQuestion | ShortAnswerQuestion)[]).map(q => ({ ...q, questionId: questionCounter++.toString() })));
          // Basic re-numbering of question IDs if needed
          questions.forEach((q, index) => (q.questionId = (index + 1).toString()));
        } else {
          console.error('Failed to parse the generated content into the expected question format.');
          // Fallback to a simpler question generation approach if parsing fails
          questions.push(...(await generateQuestionsFallback(pdfTemplate)));
        }
      } catch (error) {
        console.error('Error parsing generated JSON:', error);
        // Fallback to a simpler question generation approach if JSON parsing fails
        questions.push(...(await generateQuestionsFallback(pdfTemplate)));
      }
    } else {
      console.warn('No content generated by OpenAI for the question paper.');
      questions.push(...(await generateQuestionsFallback(pdfTemplate)));
    }
  } catch (error) {
    console.error('Error calling OpenAI for general question paper generation:', error);
    questions.push(...(await generateQuestionsFallback(pdfTemplate)));
  }

  return {
    paperId: paperId,
    paperTitle: paperTitle,
    question: questions,
  };
}

// Fallback function for simpler question generation if the main prompt fails to produce the desired JSON
async function generateQuestionsFallback(pdfTemplate: PdfTemplate): Promise<(McqQuestion | ShortAnswerQuestion)[]> {
  const questions: (McqQuestion | ShortAnswerQuestion)[] = [];
  let questionCounter = 1;

  // --- Fallback: Generate Multiple Choice Questions ---
  const mcqPrompt = `Based on the following content, generate 2 multiple-choice questions related to "${pdfTemplate.lectureTitle}", each with 4 options (A, B, C, D). Indicate the correct answer's option ID and provide a short explanation for each option. Include a hint if possible.\n\nTitle: ${pdfTemplate.lectureTitle}\nAbstract: ${pdfTemplate.abstract}\nKey Points: ${pdfTemplate.keyPoints.join(', ')}\nContent: ${pdfTemplate.content}`;

  try {
    const mcqResponse = await client.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: mcqPrompt }],
      temperature: 0.7,
    });

    const mcqContent = mcqResponse.choices[0]?.message?.content;
    // Implement parsing logic here based on the expected text format from the fallback prompt
    // This will require more robust parsing than simply splitting by newlines.
    console.warn('Fallback MCQ generation - Parsing logic needs implementation based on the output format.');
  } catch (error) {
    console.error('Fallback error generating multiple choice questions:', error);
  }

  // --- Fallback: Generate Short Answer Questions ---
  const shortAnswerPrompt = `Based on the following content, generate 2 short answer questions related to "${pdfTemplate.lectureTitle}". Provide an explanation for each answer.\n\nTitle: ${pdfTemplate.lectureTitle}\nAbstract: ${pdfTemplate.abstract}\nKey Points: ${pdfTemplate.keyPoints.join(', ')}\nContent: ${pdfTemplate.content}`;

  try {
    const shortAnswerResponse = await client.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: shortAnswerPrompt }],
      temperature: 0.5,
    });

    const shortAnswerContent = shortAnswerResponse.choices[0]?.message?.content;
    // Implement parsing logic here based on the expected text format from the fallback prompt
    console.warn('Fallback Short Answer generation - Parsing logic needs implementation based on the output format.');
  } catch (error) {
    console.error('Fallback error generating short answer questions:', error);
  }

  return questions;
}


// Example Usage
async function main() {
  const pdfTemplate: PdfTemplate = {
    uid: 'test-uid',
    lectureTitle: 'Introduction to Quantum Physics',
    abstract: 'This lecture provides a basic introduction to the principles of quantum physics, covering wave-particle duality, superposition, and quantum entanglement.',
    keyPoints: ['Wave-particle duality', 'Superposition', 'Quantum entanglement'],
    content: 'Quantum physics is a fundamental theory in physics that describes the physical properties of nature at the scale of atoms and subatomic particles. Unlike classical physics, which assumes that energy, momentum, angular momentum, and other quantities of a system may vary continuously, quantum mechanics postulates that these quantities are often restricted to a discrete set of values (quantization). One of the key concepts in quantum physics is wave-particle duality, which states that every elementary particle or quantic entity exhibits the properties of not only a particle, but also the properties of a wave. Another important principle is superposition, which states that a quantum mechanical system can exist in a combination of multiple states simultaneously. Finally, quantum entanglement is a phenomenon in which two or more quantum particles become linked together in such a way that the quantum state of one particle cannot be independently described without describing the state of the other particles, even when the particles are separated by a large distance.',
  };

  const questionPaper = await generateQuestionPaper(pdfTemplate);
  console.log(JSON.stringify(questionPaper, null, 2));
}

main();